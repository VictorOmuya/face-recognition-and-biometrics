# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face_algorithm.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
#from VideoCapture import Device
import  cv2
import numpy as np
import os
import time
from imgprocess import *
import imgprocess
from lbp_img import Ui_load_img
from gabor_img import Ui_gabo_img

class Ui_face(object):
    
    def cont(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_load_img()
        self.ui.setupUi(self.window) 
        self.window.show()

    def cont2(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_gabo_img()
        self.ui.setupUi(self.window) 
        self.window.show()
    
    def mess(self, title, message):
        mess = QtWidgets.QMessageBox()
        mess.setWindowTitle(title)
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mess.exec_()
    
    def use_gabor(self):
        
   
        cap = cv2.VideoCapture(0)
        while(True):
            # Delay
            # time.sleep(1)
            # Capture frame-by-frame
            ret, frame = cap.read()

            result = get_objects_from_img(frame, webcam=True)

            #print(result)
            # Display the resulting frame
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            
        # When everything is done, release the capture
        cap.release()
        cv2.destroyAllWindows()
    
            
    def setupUi(self, face):
        face.setObjectName("face")
        face.resize(622, 272)
        self.btngabor = QtWidgets.QPushButton(face)
        self.btngabor.setGeometry(QtCore.QRect(20, 110, 251, 61))
        font = QtGui.QFont()
        font.setFamily("News701 BT")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btngabor.setFont(font)
        self.btngabor.setObjectName("btngabor")
        self.btngabor.clicked.connect(self.use_gabor)
        
        self.btnlbp = QtWidgets.QPushButton(face)
        self.btnlbp.setGeometry(QtCore.QRect(340, 110, 251, 61))
        font = QtGui.QFont()
        font.setFamily("News701 BT")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.btnlbp.setFont(font)
        self.btnlbp.setObjectName("btnlbp")
        self.btnlbp.clicked.connect(self.cont)

        self.topic = QtWidgets.QLabel(face)
        self.topic.setGeometry(QtCore.QRect(0, 0, 621, 61))
        font = QtGui.QFont()
        font.setFamily("Book Antiqua")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.topic.setFont(font)
        self.topic.setStyleSheet("color: rgb(0, 0, 0);")
        self.topic.setAlignment(QtCore.Qt.AlignCenter)
        self.topic.setObjectName("topic")
        
        self.label = QtWidgets.QLabel(face)
        self.label.setGeometry(QtCore.QRect(0, 0, 621, 271))
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.label.raise_()
        self.btngabor.raise_()
        self.btnlbp.raise_()
        self.topic.raise_()

        self.retranslateUi(face)
        QtCore.QMetaObject.connectSlotsByName(face)

    def retranslateUi(self, face):
        _translate = QtCore.QCoreApplication.translate
        face.setWindowTitle(_translate("face", "Face"))
        self.btngabor.setText(_translate("face", "GABOR WAVE"))
        self.btnlbp.setText(_translate("face", "LOCAL BINARY PATTERN"))
        self.label.setText(_translate("face", ""))
        self.topic.setText(_translate("face", "FACE RECOGNITION USING GABOR WAVE  AND LOCAL BINNARY PATTERN"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    face = QtWidgets.QDialog()
    ui = Ui_face()
    ui.setupUi(face)
    face.show()
    sys.exit(app.exec_())

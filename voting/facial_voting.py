# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './pyQts/face_recog.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import csv
from datetime import datetime
from PyQt5.QtGui import QPixmap
import cv2

import numpy as np
import face_recognition
import os

from PIL import ImageGrab

class Ui_Dialog(object):
    
    def messagebox(self, title, message):
        mess = QtWidgets.QMessageBox()
        mess.setWindowTitle(title)
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mess.exec_()
    
    def create_csv(self):
        today = datetime.date(datetime.now())
        todaystr = str(today)
        filename = '%s.csv'%todaystr
        with open(filename, 'w') as csvfile:
            filewriter = csv.writer(csvfile)
            filewriter.writerow(['Name', 'Time', 'Status', 'Candidate'])
        
        self.messagebox('vote', 'Created!')
    
    def markAttendance(self):
        if self.lineEdit.text() == 'registered':
            self.voter()
        else:
            self.messagebox('error', 'not eligible')  

    def classname(self):
        
        path = 'registered'
        self.images = []
        self.classNames = []
        myList = os.listdir(path)
        
        for cl in myList:
            curImg = cv2.imread(f'{path}/{cl}')
            self.images.append(curImg)
            self.classNames.append(os.path.splitext(cl)[0])
        return self.classNames, self.images
     
    def findEncodings(self, images):
        
        self.encodeList = []
        for img in images:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            encode = face_recognition.face_encodings(img)[0]
            self.encodeList.append(encode)
        return self.encodeList
     
     
    #### FOR CAPTURING SCREEN RATHER THAN WEBCA
    
    def capture(self):
        try:
            
            classNames, images = self.classname()
            encodeListKnown = self.findEncodings(images)
             
            self.cap = cv2.VideoCapture(0)
            
            
            while True:
                success, img = self.cap.read()
                #img = captureScreen()
                imgS = cv2.resize(img,(0,0),None,0.25,0.25)
                imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)
             
                facesCurFrame = face_recognition.face_locations(imgS)
                encodesCurFrame = face_recognition.face_encodings(imgS,facesCurFrame)
             
                for encodeFace,faceLoc in zip(encodesCurFrame,facesCurFrame):
                    matches = face_recognition.compare_faces(encodeListKnown,encodeFace)
                    faceDis = face_recognition.face_distance(encodeListKnown,encodeFace)
                    #print(faceDis)
                    matchIndex = np.argmin(faceDis)
             
                    if matches[matchIndex]:
                        self.name = classNames[matchIndex].upper()
                        
                        #print(name)
                        y1,x2,y2,x1 = faceLoc
                        y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4
                        cv2.rectangle(img,(x1,y1),(x2,y2),(170,0,0),1)
                        cv2.rectangle(img,(x1,y2-20),(x2,y2),(170,0,0),cv2.FILLED)
                        cv2.putText(img,'Face Detected',(x1+4,y2-4),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),1)
                        self.txtname.setText(self.name)
                        self.comboBox.show()
                        
                    else:
                        unrec = 'Not Recognised'
                        y1,x2,y2,x1 = faceLoc
                        y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4
                        cv2.rectangle(img,(x1,y1),(x2,y2),(170,0,0),1)
                        cv2.rectangle(img,(x1,y2-20),(x2,y2),(170,0,0),cv2.FILLED)
                        cv2.putText(img,unrec,(x1+4,y2-3),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),1)
                        self.txtname.setText('')
                cv2.imshow('Webcam',img)
                #cv2.waitKey(1)
                
                if cv2.waitKey(20) & 0xFF == ord('q'):
                            break
            self.cap.release()    
            cv2.destroyAllWindows()
        except:
            self.messagebox('error', 'Camera error!')
    
    def markvoting(self,name, Cand):
        today = datetime.date(datetime.now())
        todaystr = str(today)
        filename = '%s.csv'%todaystr
        
        with open(filename,'r+') as f:
            myDataList = f.readlines()
            nameList = []
            for line in myDataList:
                entry = line.split(',')
                nameList.append(entry[0])
            if name not in nameList:
                now = datetime.now()
                dtString = now.strftime('%H:%M:%S')
                f.writelines(f'\n{name},{dtString}, voted, {Cand}')
    
    def finished(self):
        try:
            
            self.markvoting(self.name, self.comboBox.currentText())
            self.messagebox('voting', 'Voting Process Successfully Completed')
        except:
            self.messagebox('voting', 'Check if user was registered!')
            
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(592, 259)
        self.createAtt = QtWidgets.QPushButton(Dialog)
        self.createAtt.setGeometry(QtCore.QRect(10, 210, 261, 41))
        font = QtGui.QFont()
        font.setFamily("Felix Titling")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createAtt.setFont(font)
        self.createAtt.setStyleSheet("\n"
"color: rgb(170, 0, 0);")
        self.createAtt.setObjectName("createAtt")
        self.createAtt.clicked.connect(self.create_csv)
        
        self.markAtt = QtWidgets.QPushButton(Dialog)
        self.markAtt.setGeometry(QtCore.QRect(280, 210, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Felix Titling")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.markAtt.setFont(font)
        self.markAtt.setStyleSheet("\n"
"color: rgb(170, 0, 0);")
        self.markAtt.setObjectName("markAtt")
        self.markAtt.clicked.connect(self.capture)
        
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(-4, 200, 601, 61))
        self.label.setStyleSheet("background-color: rgb(170, 0, 0);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.backgd = QtWidgets.QLabel(Dialog)
        self.backgd.setGeometry(QtCore.QRect(0, 0, 591, 201))
        self.backgd.setText("")
        self.backgd.setObjectName("backgd")
        pixmap = QPixmap("voting.jpg")
        self.backgd.setPixmap(pixmap)
        self.backgd.setScaledContents(True)
        
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(20, 80, 551, 61))
        font = QtGui.QFont()
        font.setFamily("Bauhaus 93")
        font.setPointSize(24)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(170, 0, 0);\n"
"color: rgb(170, 0, 0);")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        
        self.txtname = QtWidgets.QLabel(Dialog)
        self.txtname.setGeometry(QtCore.QRect(190, 180, 211, 20))
        self.txtname.setText("")
        self.txtname.setAlignment(QtCore.Qt.AlignCenter)
        self.txtname.setObjectName("txtname")
        font1 = QtGui.QFont()
        font1.setFamily("Felix Titling")
        font1.setPointSize(10)
        font1.setBold(True)
        font1.setItalic(False)
        font1.setWeight(50)
        self.txtname.setFont(font1)
        
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setEnabled(True)
        self.comboBox.setGeometry(QtCore.QRect(190, 20, 201, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem('Candidate A')
        self.comboBox.addItem('Candidate B')
        self.comboBox.addItem('Candidate C')
        self.comboBox.hide()
        self.comboBox.setFont(font1)        
        
        self.finish = QtWidgets.QPushButton(Dialog)
        self.finish.setGeometry(QtCore.QRect(480, 210, 101, 41))
        font = QtGui.QFont()
        font.setFamily("Felix Titling")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.finish.setFont(font)
        self.finish.setStyleSheet("\n"
"color: rgb(170, 0, 0);")
        self.finish.setObjectName("finish")
        self.finish.clicked.connect(self.finished)
        
        self.label.raise_()
        self.createAtt.raise_()
        self.markAtt.raise_()
        self.backgd.raise_()
        self.label_2.raise_()
        self.txtname.raise_()
        self.comboBox.raise_()
        self.finish.raise_()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.createAtt.setText(_translate("Dialog", "CREATE DATABASE"))
        self.markAtt.setText(_translate("Dialog", "VOTE"))
        self.label_2.setText(_translate("Dialog", "<html><head/><body><p>FACE RECOGNITION FOR VOTING</p></body></html>"))
        self.finish.setText(_translate("Dialog", "FINISH"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
